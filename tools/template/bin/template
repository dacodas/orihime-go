#!/bin/bash

set -euo pipefail

SEPARATOR_1="$(printf '\x1F')"
SEPARATOR_2="$(printf '\x1E')"

TEMPLATES="sql-insert sql-query"
PATH="${PWD}/bin:${PATH}"

: ${ORIHIME_ROOT:=../../}

loop_over_functions() {
	BASH_FRIENDLY_TEMPLATE=${TEMPLATE//-/_}
	while IFS=${SEPARATOR_1} read -a COLUMNS "-d${SEPARATOR_2}"
	do 
		prepare_environment_${BASH_FRIENDLY_TEMPLATE}
		${@}
	done < build/${TEMPLATE}.contracted
}

loop_over_templates() { 
	for TEMPLATE in ${TEMPLATES}
	do
		${@}
	done
}

prepare_environment_sql_insert() {
	export FUNCTION_NAME="${COLUMNS[0]}"
	export IN_PARAMETERS="${COLUMNS[1]}"
	export OUT_PARAMETERS="${COLUMNS[2]}"
	export PREPARATION="${COLUMNS[3]}"
	export SQL_STATEMENT="${COLUMNS[4]}"
	export ARGUMENTS="${COLUMNS[5]}"
}

prepare_environment_sql_query() {
	export FUNCTION_NAME="${COLUMNS[0]}"
	export IN_PARAMETERS="${COLUMNS[1]}"
	export OUT_PARAMETERS="${COLUMNS[2]}"
	export PREPARATION="${COLUMNS[3]}"
	export SQL_STATEMENT="${COLUMNS[4]}"
	export ARGUMENTS="${COLUMNS[5]}"
	export SCAN_VARIABLES="${COLUMNS[6]}"
	export QUERY_PREPARATION="${COLUMNS[7]}"
	export QUERY_PREPARATION_PER_ROW="${COLUMNS[8]}"
	export QUERY_PROCESS_PER_ROW="${COLUMNS[9]}"
	export RETURN="${COLUMNS[10]}"

	for VAR in QUERY_PREPARATION QUERY_PROCESS_PER_ROW RETURN
	do
		echo "${VAR}=${!VAR}"
	done

	read SCAN_VARIABLES_AS_SCAN_ARGUMENTS \
		< <( echo -n "${SCAN_VARIABLES}" | awk '{printf("&%s\n", $1)}' | paste -sd',' - | sed 's/,/, /g' )
	read SCAN_VARIABLES_AS_FORMAT_STRING \
		< <( echo -n "${SCAN_VARIABLES}" | sed 's/.*/%v/' | paste -sd',' | sed 's/,/, /g')
	read SCAN_VARIABLES_AS_FORMAT_ARGUMENTS \
		< <( echo -n "${SCAN_VARIABLES}" | awk '{printf("%s\n", $1)}' | paste -sd',' - | sed 's/,/, /g' )

	export SCAN_VARIABLES_AS_SCAN_ARGUMENTS
	export SCAN_VARIABLES_AS_FORMAT_STRING
	export SCAN_VARIABLES_AS_FORMAT_ARGUMENTS
}

perform_envsubst() {
	envsubst < src/${TEMPLATE}-skeleton >> build/${TEMPLATE}-templated
}

template_functions() {
	< /dev/null > build/${TEMPLATE}-templated

	loop_over_functions perform_envsubst

	cat src/${TEMPLATE}-preamble build/${TEMPLATE}-templated > build/${TEMPLATE}.templated.go
	go fmt build/${TEMPLATE}.templated.go
}

contract() {
	separator-control contract \
		< src/${TEMPLATE}.expanded \
		> build/${TEMPLATE}.contracted
}

move_to_proper_source_locations() {
	cp build/${TEMPLATE}.templated.go ${ORIHIME_ROOT}/internal/database/${TEMPLATE}.templated.go
}

test_func() {
	echo "Womp"
}

t() {
	TEMPLATE=sql-query 
	contract
	template_functions
	loop_over_functions test_func
}

main() {
	mkdir -p build

	loop_over_templates contract
	loop_over_templates template_functions
	loop_over_templates move_to_proper_source_locations
}

if [ $# -eq 0 ]
then
	main
	exit 0
fi

case $1 in 
t)
	t
	;;
*)	
	main
	;;
esac
