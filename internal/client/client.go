package client

import (
	"context"
	"log"
	"orihime/internal/protobuf"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	"encoding/base64"
)

var (
	InstantiatedOrihimeClient protobuf.OrihimeClient
	serverAddress string = "localhost:12345"
	orihimeGRPCContext context.Context
	options []grpc.CallOption
)

func AddChildWord(word string, definition string, source string, user string, parentTextHash []byte) {
	InstantiatedOrihimeClient.AddChildWord(orihimeGRPCContext, &protobuf.ChildWordToAdd{Word: word, Definition: definition, Source: source, User: user, ParentTextHash: parentTextHash}, options...)
}

func AddText(contents string, source string) {
	InstantiatedOrihimeClient.AddText(orihimeGRPCContext, &protobuf.TextToAdd{Content: contents, Source: source}, options...)
}

func AddWord(word string, definitionText string, source string) {
	InstantiatedOrihimeClient.AddWord(orihimeGRPCContext, &protobuf.WordToAdd{Word: word, DefinitionText: definitionText, Source: source}, options...)
}

func AddSource(source string) {
	InstantiatedOrihimeClient.AddSource(orihimeGRPCContext, &protobuf.SourceToAdd{Source: source}, options...)
}

func GetTextTree(textHash []byte, user string) {
	reply, _ := InstantiatedOrihimeClient.TextTree(orihimeGRPCContext, &protobuf.TextTreeRequest{ParentTextHash: textHash, User: user}, options...)

	log.Printf("%v", len(reply.Nodes))
	log.Printf("%v", reply.Nodes)
}

func init() {

	var md = metadata.Pairs(
		"token", base64.StdEncoding.EncodeToString([]byte{ 0x7b, 0x0a, 0x20, 0x20, 0x22, 0x75, 0x73, 0x65, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x64, 0x61, 0x63, 0x6f, 0x64, 0x61, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x0a, 0x20, 0x20, 0x22, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x35, 0x38, 0x35, 0x36, 0x31, 0x32, 0x31, 0x31, 0x35, 0x22, 0x0a, 0x7d, 0x0a }),
		"signature", base64.StdEncoding.EncodeToString([]byte{ 0x05, 0xfa, 0x67, 0xbe, 0x4c, 0x8f, 0xcd, 0x6b, 0xe9, 0x96, 0xae, 0x6b, 0xc1, 0x9a, 0xb8, 0x94, 0x6d, 0x67, 0xae, 0x9c, 0xd6, 0xa5, 0x56, 0x6f, 0x9c, 0xab, 0xa1, 0xc6, 0xd3, 0x90, 0xf3, 0x70, 0xca, 0x5b, 0x47, 0xfe, 0x11, 0x36, 0x87, 0x2b, 0xda, 0xfc, 0x95, 0x75, 0x78, 0xcb, 0x9c, 0xfd, 0x44, 0x03, 0x85, 0x95, 0xb9, 0x37, 0x53, 0x95, 0x0b, 0x10, 0x94, 0xd8, 0x3f, 0x0e, 0xfa, 0xa4, 0x36, 0x12, 0x11, 0x60, 0x3b, 0x0b, 0x0d, 0xff, 0xa8, 0xe4, 0x39, 0x01, 0x70, 0x84, 0xcc, 0xed, 0x15, 0x6d, 0x2b, 0x63, 0x31, 0x28, 0x3d, 0xd9, 0x0b, 0xf1, 0x8c, 0x09, 0x3c, 0xd6, 0x76, 0xf7, 0x69, 0x2a, 0x7f, 0x88, 0x10, 0xc6, 0xf4, 0xa0, 0xea, 0x4d, 0x76, 0xc6, 0x80, 0x9e, 0xb0, 0x41, 0xa3, 0x8f, 0x6e, 0xaa, 0xff, 0xf2, 0xbc, 0xbe, 0x23, 0xc8, 0xa5, 0xc2, 0x66, 0x45, 0xb6, 0xae, 0xba, 0xd9, 0xbf, 0x7d, 0x82, 0x30, 0x5b, 0xf8, 0xac, 0xbf, 0x7c, 0xc4, 0xd5, 0x0f, 0x60, 0x56, 0x0b, 0xbd, 0x09, 0x31, 0xbe, 0xb2, 0xbd, 0xbb, 0x32, 0x76, 0x55, 0x86, 0xf6, 0x12, 0x83, 0x65, 0xbb, 0x84, 0x7a, 0xfe, 0x46, 0xd3, 0x8f, 0xac, 0x17, 0x75, 0x05, 0x9d, 0xfe, 0x84, 0xab, 0xb8, 0x39, 0x06, 0x62, 0x5e, 0x61, 0x9d, 0x29, 0xdc, 0x79, 0x11, 0x70, 0x41, 0xa8, 0x35, 0xbe, 0x29, 0x53, 0x45, 0xf2, 0x28, 0x0a, 0xd2, 0x57, 0x8e, 0x28, 0x09, 0x1d, 0x3d, 0x42, 0xc7, 0xdd, 0x19, 0x9a, 0x51, 0x94, 0x33, 0x0e, 0x93, 0x10, 0x8b, 0x7d, 0xf6, 0x6c, 0x55, 0xf7, 0x30, 0x9e, 0xa2, 0x71, 0xa4, 0x1b, 0x91, 0xdb, 0x6e, 0x7b, 0x24, 0xbb, 0x85, 0xdd, 0x4c, 0x00, 0xa8, 0xf0, 0x39, 0x41, 0xb0, 0xc1, 0x1f, 0xae, 0x37, 0xac, 0xc2, 0x0f, 0xf1, 0xb5, 0xcd, 0xae, 0xba, 0x8a, 0x66, 0x94, 0xce, 0x63, 0x34, 0xde, 0xaf, 0xbf, 0x31, 0xeb, 0x91, 0x0c, 0x5c, 0x1f, 0xa4, 0x77, 0x86, 0x66, 0x63, 0x11, 0x71, 0x80, 0x6f, 0xf8, 0x49, 0x07, 0xa7, 0x34, 0x6d, 0xf2, 0x89, 0x08, 0xf3, 0x79, 0xc9, 0x86, 0x44, 0x86, 0xd8, 0xd8, 0x14, 0xf9, 0x88, 0xc1, 0x38, 0x5d, 0xc0, 0xee, 0x52, 0x33, 0xb9, 0xd6, 0x79, 0x7c, 0xd8, 0x8a, 0x03, 0x72, 0x72, 0x65, 0x47, 0xcd, 0xc6, 0x4b, 0x88, 0x6c, 0x3e, 0x83, 0xa3, 0x42, 0xf2, 0x4e, 0xf6, 0xd7, 0x11, 0x3d, 0x41, 0x83, 0x48, 0x27, 0xd2, 0x60, 0x93, 0x16, 0x27, 0x9e, 0x86, 0x7d, 0xbc, 0xb8, 0x98, 0x81, 0xc7, 0x27, 0x80, 0x12, 0x53, 0x27, 0x82, 0x30, 0x20, 0x01, 0x1e, 0xbd, 0xd8, 0x89, 0xc5, 0x26, 0x59, 0x52, 0x72, 0xd5, 0x50, 0x9b, 0x46, 0x8a, 0xf1, 0xb2, 0xf8, 0xfc, 0xbf, 0xfb, 0x90, 0xd7, 0x8b, 0xad, 0xf1, 0x18, 0x27, 0xc9, 0x36, 0x8e, 0x49, 0xd1, 0x7b, 0xf8, 0x9e, 0xcc, 0x9c, 0x56, 0xc9, 0x4b, 0x4e, 0x27, 0x09, 0x8f, 0xb5, 0xc7, 0x71, 0x7e, 0xcc, 0xa8, 0x67, 0x21, 0x7d, 0x93, 0xfa, 0x2d, 0x99, 0xe7, 0xe8, 0x48, 0xb4, 0xd6, 0x64, 0xcc, 0xb7, 0x5b, 0x66, 0x05, 0xe7, 0x57, 0x52, 0xce, 0x8b, 0x5a, 0x63, 0xb0, 0xff, 0x12, 0xc2, 0xc8, 0x91, 0x65, 0x30, 0xe8, 0x0d, 0x1d, 0x21, 0x41, 0x1a, 0xc8, 0x7b, 0xfa, 0x0e, 0x1b, 0x79, 0x20, 0x95, 0x11, 0x9d, 0xe2, 0xad, 0x5f, 0xa8, 0xfa, 0x9a, 0xf2, 0x40, 0x74, 0x4e, 0x75, 0xd8, 0x2f, 0xa7, 0xef, 0x7d, 0xfb, 0x3b, 0x3b, 0x4d, 0xd6, 0x2a, 0x05, 0x62, 0xb9, 0x81, 0x78, 0x1c, 0x96, 0xbb, 0x5b, 0xb0, 0xbe, 0xfe, 0x0e, 0xa2, 0xe0, 0xb4, 0x27, 0x95, 0xe6, 0xe0, 0x49, 0xe7, 0xf3, 0x44, 0x28, 0x02, 0x09, 0x13, 0x68, 0xf5, 0x9e, 0x6b, 0x62, 0xe3 }),
	)

	orihimeGRPCContext = metadata.NewOutgoingContext(context.Background(), md)

	options = []grpc.CallOption{}

	connection, err := grpc.Dial(serverAddress, grpc.WithBlock(), grpc.WithInsecure())
	if err != nil {
		log.Fatalf("failed to dial: %v", err)
	}
	// defer connection.Close()

	InstantiatedOrihimeClient = protobuf.NewOrihimeClient(connection)
}


