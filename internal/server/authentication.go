package server

import (
	"context"
	"crypto"
	"math/big"
	"log"
	"crypto/rsa"
	"crypto/sha256"
	"encoding/base64"

	metadata "google.golang.org/grpc/metadata"
)

var (
	publicKey rsa.PublicKey
	pssOptions rsa.PSSOptions
)

func verifyToken(hashed []uint8, signature []uint8) bool {
	err := rsa.VerifyPSS(&publicKey, crypto.SHA256, hashed, signature, &pssOptions)
	if err == nil {
		log.Printf("Correctly signed token")
		return true
	} else {
		log.Printf("That token is not correctly signed")
		log.Printf("%v", err)
		return false
	}
}

func VerifyCallToken(ctx context.Context) bool {

	var (
		md metadata.MD
		hashed [32]byte
		tokenStrings []string
		signatureStrings []string
		token []byte
		signature []byte
		ok bool
		err error
	)

	if md, ok = metadata.FromIncomingContext(ctx); !ok {
		log.Printf("Unable to get metadata from context")
		return false
	}

	if tokenStrings, ok = md["token"]; !ok {
		log.Printf("Unable to token from metadata")
		return false
	}

	if signatureStrings, ok = md["signature"]; !ok {
		log.Printf("Unable to signature from metadata")
		return false
	}

	log.Printf("Received token: ", tokenStrings)
	log.Printf("Received signature: ", signatureStrings)

	token, err = base64.StdEncoding.DecodeString(tokenStrings[0])
	if err != nil {
		log.Printf("Error decoding token")
		return false
	}
	signature, err = base64.StdEncoding.DecodeString(signatureStrings[0])
	if err != nil {
		log.Printf("Error decoding signature")
		return false
	}

	hashed = sha256.Sum256(token)
	return verifyToken(hashed[:], signature)
}

func init() {
	var (
		modulus big.Int
		// modulusBytes = []uint8 { 0x00, 0xb6, 0x0f, 0xdb, 0x1a, 0xa7, 0xbb, 0x04, 0x71, 0xdb, 0x66, 0x0f, 0x1b, 0x7a, 0xe8, 0xd7, 0x8c, 0x88, 0xd5, 0xee, 0x62, 0x73, 0x2c, 0xab, 0x67, 0xdb, 0x8b, 0xd8, 0xb0, 0x1b, 0xa4, 0x54, 0xa0, 0x26, 0xf6, 0x5d, 0x96, 0x8c, 0xec, 0x37, 0xe5, 0x26, 0xf1, 0x3f, 0xd1, 0x2c, 0xfa, 0x04, 0x0c, 0x67, 0xba, 0x75, 0x63, 0x78, 0x59, 0xed, 0xf5, 0x3a, 0xda, 0x7e, 0xff, 0x10, 0x7b, 0x96, 0x8f, 0x6f, 0x35, 0x7c, 0xc3, 0xb1, 0xd1, 0xf3, 0x44, 0x88, 0x69, 0x13, 0x52, 0xa1, 0x32, 0xa9, 0xf8, 0xb7, 0x59, 0x41, 0x9e, 0xf5, 0xc7, 0xaa, 0xa2, 0xc0, 0xab, 0x90, 0xba, 0xfb, 0xda, 0x8d, 0x39, 0x2e, 0xb4, 0xa0, 0x43, 0xf2, 0xab, 0xe6, 0xea, 0xac, 0x7d, 0x29, 0x9f, 0xde, 0xcf, 0xdf, 0x0c, 0x9e, 0xef, 0x24, 0x93, 0xa4, 0xd9, 0xe9, 0xd1, 0x21, 0x0c, 0x3e, 0x8f, 0xdf, 0x55, 0x76, 0xe9, 0x05, 0xb8, 0x13, 0x4b, 0x1e, 0x1e, 0x0a, 0x06, 0x27, 0x8c, 0x0a, 0x3e, 0xee, 0x7b, 0x1c, 0x0b, 0xa9, 0x2f, 0x16, 0xd0, 0x87, 0x86, 0xf0, 0x67, 0xc1, 0xcc, 0x6d, 0xfb, 0x3a, 0x31, 0xaf, 0x5e, 0x35, 0x74, 0xa4, 0x20, 0x76, 0xd7, 0x13, 0x0d, 0xc5, 0x32, 0x4f, 0xda, 0x2c, 0x8c, 0x25, 0x48, 0x92, 0x53, 0xe5, 0x16, 0x47, 0x25, 0x96, 0xbf, 0x3a, 0xa4, 0x6f, 0x83, 0xc3, 0x08, 0x43, 0x76, 0x6d, 0x33, 0x18, 0xfa, 0x74, 0x66, 0x7a, 0x9d, 0xdb, 0x00, 0x56, 0xf7, 0x64, 0x2e, 0x3a, 0x6f, 0x25, 0x1b, 0xd9, 0xa1, 0x12, 0xce, 0xfb, 0x6a, 0xf2, 0xbf, 0xa7, 0xbd, 0x16, 0x9b, 0x2d, 0x03, 0x7b, 0x0b, 0xec, 0x5a, 0x7e, 0x14, 0x74, 0x92, 0x61, 0x8c, 0x99, 0x6b, 0xda, 0x36, 0xd0, 0xc5, 0x75, 0xc9, 0xff, 0x0b, 0x9e, 0x6e, 0x6e, 0xe6, 0x1c, 0xf4, 0x6c, 0xb7, 0xfe, 0xe6, 0xc4, 0x29, 0x18, 0x6a, 0xa0, 0x89, 0x6e, 0x79, 0x5e, 0x3f, 0xe6, 0x4d, 0x64, 0xde, 0xa2, 0x7b, 0xbb, 0xde, 0x9f, 0x50, 0x9a, 0xbb, 0xde, 0x08, 0xac, 0xcd, 0x09, 0xe1, 0x94, 0x30, 0xc4, 0x5c, 0x1a, 0xa2, 0xb9, 0x46, 0xec, 0x57, 0x06, 0x83, 0x30, 0x06, 0x38, 0x11, 0x70, 0xb2, 0xde, 0xcf, 0xbb, 0xc3, 0x85, 0x3b, 0x49, 0x84, 0xd5, 0x6e, 0x53, 0xcd, 0x37, 0x2c, 0xb2, 0x21, 0x8b, 0x40, 0xa1, 0x9a, 0x16, 0xae, 0x75, 0x10, 0x4a, 0x8f, 0xfc, 0x68, 0xe6, 0xf7, 0x8d, 0xbd, 0x77, 0x5a, 0x5f, 0x25, 0xd2, 0x2f, 0x43, 0x0e, 0xde, 0xb9, 0xb2, 0x70, 0xae, 0x97, 0x96, 0x91, 0xef, 0xea, 0xb5, 0x40, 0x49, 0x49, 0xd6, 0xf3, 0xe2, 0x4c, 0xc6, 0xc3, 0x8d, 0x31, 0xf6, 0x14, 0x0f, 0x2b, 0xca, 0x95, 0x09, 0x0e, 0xbd, 0x3d, 0x06, 0xbc, 0x64, 0xa6, 0x9b, 0xf8, 0x1b, 0x48, 0x16, 0xd8, 0x68, 0x62, 0x03, 0x55, 0xdd, 0xec, 0x0b, 0x85, 0xd4, 0xbb, 0x68, 0x85, 0x66, 0x43, 0x73, 0xec, 0x08, 0x2f, 0x86, 0x10, 0x9a, 0xd3, 0x32, 0x77, 0xc5, 0x96, 0x5d, 0xbd, 0xa9, 0x15, 0x72, 0x81, 0x6d, 0xe6, 0x8d, 0xdb, 0xe6, 0xdc, 0x4c, 0x44, 0x50, 0x8a, 0xaf, 0x12, 0x62, 0x0e, 0xf7, 0xdf, 0x44, 0xc8, 0x8f, 0x7c, 0x17, 0x0a, 0x2d, 0xa2, 0x16, 0x11, 0x73, 0x69, 0x8e, 0x27, 0xd8, 0x05, 0x88, 0x3d, 0x85, 0xcb, 0x66, 0x42, 0x3f, 0x57, 0x2b, 0x76, 0xcd, 0x32, 0x61, 0x82, 0x96, 0x00, 0x35, 0xaf, 0xe4, 0x5d, 0xfc, 0x9f, 0xed, 0x3d, 0xd8, 0x52, 0x4c, 0x22, 0xeb, 0x0c, 0xb9, 0x5d, 0x0f, 0x31, 0x10, 0xd4, 0xb9, 0x0e, 0xa0, 0x08, 0x0b, 0xef, 0x9b, 0x2f, 0x10, 0x90, 0x85, 0x0b, 0x7b, 0x58, 0xca, 0x21, 0x66, 0xcf, 0xfe, 0xfb, 0xc1, 0xfe, 0x5b, 0x21, 0xa5, 0xad, 0xc4, 0x5f, 0xe7, 0x45 }
		modulusBytes = []uint8 { 0x00, 0xC8, 0xD3, 0x91, 0xCC, 0x5D, 0x86, 0x0B, 0x62, 0xE1, 0x71, 0xE7, 0x87, 0x66, 0x9D, 0x9C, 0x3B, 0x4B, 0xA9, 0xC9, 0x2D, 0x28, 0xC7, 0x52, 0x1F, 0xCB, 0x68, 0xFE, 0x04, 0x67, 0x78, 0xF9, 0xCE, 0xA8, 0x7C, 0x5D, 0xA7, 0xCA, 0x0B, 0xE8, 0x7D, 0x4B, 0xD6, 0xB2, 0xD9, 0xB4, 0x9D, 0xF3, 0x6F, 0x4F, 0x26, 0xAA, 0x80, 0x4C, 0x9A, 0xF5, 0x12, 0xCA, 0x55, 0x2B, 0x13, 0xFC, 0xAD, 0x35, 0xFF, 0x6D, 0x77, 0xA8, 0x3C, 0x50, 0xE9, 0xC8, 0xE5, 0xCC, 0x4E, 0x04, 0x48, 0xBB, 0x3A, 0x08, 0x20, 0xD6, 0xA2, 0x9D, 0xE7, 0x24, 0xF7, 0x5A, 0xBD, 0xE4, 0xF2, 0xA4, 0x30, 0x08, 0x3A, 0xDA, 0xE9, 0x10, 0xC9, 0x26, 0x77, 0x91, 0x32, 0xE7, 0xE2, 0x9C, 0xA6, 0xE0, 0x89, 0xFC, 0xB6, 0x43, 0xF1, 0x7C, 0x0A, 0x3F, 0x2C, 0x39, 0xC0, 0xFA, 0x00, 0x88, 0x3C, 0x38, 0x9B, 0x86, 0x1D, 0x41, 0xD8, 0x8A, 0x4A, 0xA9, 0x28, 0x98, 0xC9, 0x36, 0x18, 0x96, 0x33, 0x79, 0x58, 0xC2, 0xB6, 0x12, 0x28, 0x66, 0xB2, 0xB5, 0xEC, 0xE6, 0xF2, 0xAC, 0x1C, 0xBD, 0x2C, 0x6D, 0xA9, 0x52, 0x22, 0xA3, 0xCB, 0xB1, 0x21, 0x0F, 0x96, 0x5B, 0x06, 0xFC, 0x10, 0x47, 0xC3, 0xA5, 0x6D, 0x32, 0x87, 0x71, 0x51, 0xC3, 0x2A, 0xB5, 0xBB, 0xF0, 0xD6, 0x48, 0xDD, 0x7F, 0x19, 0x1E, 0xC8, 0xAA, 0x23, 0xBF, 0x94, 0x93, 0xD5, 0x40, 0x59, 0x9E, 0x8B, 0x1D, 0xB0, 0x60, 0x21, 0x99, 0xDB, 0xBE, 0x2B, 0xF9, 0xDE, 0x1E, 0x53, 0x83, 0x61, 0xFF, 0xA5, 0x2A, 0x94, 0x38, 0xAE, 0x45, 0x3F, 0x86, 0x8F, 0x14, 0xF7, 0x60, 0xE0, 0x01, 0x1A, 0x5D, 0x28, 0xB4, 0x41, 0x84, 0x2A, 0xE0, 0xA3, 0xCC, 0x6F, 0x04, 0xE9, 0x86, 0x34, 0xE7, 0x8B, 0x29, 0xBA, 0xF0, 0x77, 0xD9, 0xE7, 0xFD, 0xCB, 0xF6, 0x1D, 0x98, 0x1E, 0x51, 0x87, 0xE1, 0xA9, 0x8E, 0xD5, 0x22, 0x24, 0x66, 0xC9, 0x05, 0x68, 0xD1, 0x35, 0xA5, 0x18, 0x38, 0x08, 0x8F, 0xD8, 0xAF, 0x91, 0x0F, 0x13, 0x38, 0xC5, 0xDB, 0x3A, 0x46, 0xC6, 0x1F, 0x5D, 0xE0, 0xD4, 0x9D, 0xF7, 0xBD, 0xC4, 0x61, 0x80, 0x61, 0xAC, 0xC1, 0xB9, 0x74, 0x8E, 0xB2, 0xF8, 0xC9, 0xA0, 0xEC, 0x87, 0x47, 0x50, 0x78, 0x5B, 0x07, 0xD2, 0xE7, 0x37, 0xA6, 0x73, 0xA1, 0xD2, 0x80, 0x5F, 0x4F, 0xFF, 0x94, 0x07, 0x1C, 0xA3, 0xAF, 0x2F, 0x4D, 0xA8, 0xBC, 0x8A, 0x2D, 0x92, 0x2D, 0x6F, 0xEC, 0x62, 0x6E, 0x78, 0xD3, 0xF6, 0xAF, 0x73, 0xAB, 0xB0, 0x36, 0x2A, 0xC2, 0x4C, 0x72, 0xCE, 0xBE, 0xDD, 0x22, 0x07, 0x73, 0x5D, 0xD9, 0xD3, 0xAB, 0x5E, 0xD8, 0xC9, 0x46, 0xBB, 0xA6, 0xF4, 0x72, 0xB7, 0x37, 0x8E, 0x07, 0x8A, 0xFD, 0xCB, 0x8D, 0xC7, 0xD4, 0x25, 0xEC, 0x18, 0xC9, 0x65, 0xF9, 0xDE, 0x44, 0xED, 0x5B, 0x46, 0x1C, 0xA0, 0x4B, 0xD0, 0x22, 0x82, 0x73, 0xD1, 0x48, 0xCC, 0x33, 0xE3, 0x92, 0x2A, 0xCC, 0xB1, 0xC6, 0x6B, 0x2E, 0xCC, 0x55, 0x21, 0xA5, 0xFE, 0xF2, 0xC1, 0xE4, 0x54, 0x10, 0x77, 0x7E, 0x5C, 0xE9, 0x4B, 0x32, 0xBD, 0xE5, 0x98, 0x66, 0xE8, 0xF2, 0x10, 0xC2, 0x1D, 0x79, 0x84, 0xFF, 0x74, 0x80, 0x6A, 0xB7, 0x43, 0xF4, 0x9F, 0x72, 0x0A, 0x4A, 0xDC, 0x19, 0x5E, 0x06, 0x93, 0xBE, 0xA3, 0x55, 0xE6, 0x4E, 0xC6, 0x7A, 0xB3, 0xA5, 0xEA, 0x8D, 0x2F, 0x37, 0x50, 0x9D, 0x41, 0x8B, 0x3F, 0x92, 0x9A, 0xE6, 0x7C, 0x76, 0x97, 0xD4, 0xA7, 0x40, 0x76, 0xCF, 0x33, 0xC1, 0xD2, 0xA8, 0xEF, 0x82, 0x42, 0x7F, 0x4F, 0x1D, 0xD4, 0x1E, 0x20, 0x66, 0x29, 0x6E, 0xA4, 0xBC, 0x25, 0x50, 0x16, 0x9D, 0x7F, 0xFA, 0xF2, 0xB1, 0xC0, 0x17, 0x7F }
	)

	modulus.SetBytes(modulusBytes)
	publicKey.N = &modulus
	publicKey.E = 65537

	pssOptions.Hash = crypto.SHA256
	pssOptions.SaltLength = 256
}

